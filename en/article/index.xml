<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on lapee79&#39;s Tech Blog</title>
    <link>https://lapee79.github.io/en/article/</link>
    <description>Recent content in Articles on lapee79&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 19 Jan 2020 10:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://lapee79.github.io/en/article/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Use a local disk through Local Persistent Volumes in Kubernetes</title>
      <link>https://lapee79.github.io/en/article/use-a-local-disk-by-local-volume-static-provisioner-in-kubernetes/</link>
      <pubDate>Sun, 19 Jan 2020 10:00:00 +0000</pubDate>
      
      <guid>https://lapee79.github.io/en/article/use-a-local-disk-by-local-volume-static-provisioner-in-kubernetes/</guid>
      <description>The Local Persistent Volumes feature has been promoted to GA in Kubernetes 1.14. A local persistent volume represents a local disk directly-attached to a single Kubernetes Node.
In the Kubernetes system, local disks can be used through HostPath, LocalVolume.
 HostPath: The volume itself does not contain scheduling information. If you want to fix each pod on a node, you need to configure scheduling information, such as nodeSelector, for the pod.</description>
    </item>
    
    <item>
      <title>Setup Production Ready Kubernetes on baremetal with kubespray</title>
      <link>https://lapee79.github.io/en/article/setup-production-ready-kubernetes-on-baremetal-with-kubespray/</link>
      <pubDate>Mon, 23 Dec 2019 10:00:00 +0000</pubDate>
      
      <guid>https://lapee79.github.io/en/article/setup-production-ready-kubernetes-on-baremetal-with-kubespray/</guid>
      <description>Kubespray is a composition of Ansible playbooks, inventory, provisioning tools, and domain knowledge for generic OS/Kubernetes clusters configuration management tasks.
Prerequisites Hardware  5 Nodes: Virtual/Physical Machines Memory: 8GB
 CPU: 4Core
 Hard disk: 120GB available
  Software Kubernetes nodes
 Ubuntu 18.04 Python SSH Server Privileged user  Kubespray machine
 Ansible 2.7.8+(not 2.8.x) Jinja 2.9+  Nodes Networking requisites  Internet access to download docker images and install softwares IPv4 Forwarding should be enabled In order to avoid any issue during deployment, you should disable firewall.</description>
    </item>
    
    <item>
      <title>Monitoring HTTP using Blackbox exporter</title>
      <link>https://lapee79.github.io/en/article/monitoring-http-using-blackbox-exporter/</link>
      <pubDate>Sun, 27 Oct 2019 10:00:00 +0000</pubDate>
      
      <guid>https://lapee79.github.io/en/article/monitoring-http-using-blackbox-exporter/</guid>
      <description>Blackbox exporter can monitor the external services over HTTP, HTTPS, DNS, TCP, ICMP on Prometheus. In this post, I&amp;rsquo;ll show you how to monitor HTTP/HTTPS using Blackbox exporter. Blackbox exporter is going to be running on Kubernetes.
Environment Before you begin, you need to have these:
 Kubernetes Prometheus operator  Blackbox exporter configuration Write the Blackbox configuration file as ConfigMap to configure http module for monitoring web services.</description>
    </item>
    
    <item>
      <title>Loki - Kubernetes logging</title>
      <link>https://lapee79.github.io/en/article/loki-kubernetes-logging/</link>
      <pubDate>Mon, 23 Sep 2019 10:00:00 +0000</pubDate>
      
      <guid>https://lapee79.github.io/en/article/loki-kubernetes-logging/</guid>
      <description>Loki is a Prometheus-inspired logging service for cloud native infrastructure.
What is Loki? Open sourced by Grafana Labs during KubeCon Seattle 2018, Loki is a logging backend optimized for users running Prometheus and Kubernetes with great logs search and visualization in Grafana 6.0.
Grafana Loki is a set of components, that can be composed into a fully featured logging stack.
It builds around the idea of treating a single log line as-is.</description>
    </item>
    
    <item>
      <title>Setup a production-ready Istio</title>
      <link>https://lapee79.github.io/en/article/setup-a-production-ready-istio/</link>
      <pubDate>Tue, 17 Sep 2019 10:00:00 +0000</pubDate>
      
      <guid>https://lapee79.github.io/en/article/setup-a-production-ready-istio/</guid>
      <description>Istio is open source service mesh. It adds an abstraction layer to the network. It also provides capabilities to connect, manage and secure microservices.
Istio provides built-in configuration profiles. But for production environment, we need to :
 improve performance by using tuned settings. enable SDS to secure gateways. integrate with Prometheus operator, Grafana, Jaeger and Kiali.  Now we&amp;rsquo;ll set up Istio on Kubernetes for production environment.
Install a istio using tuned settings  Download Istio release.</description>
    </item>
    
    <item>
      <title>Alerts of the Prometheus Alertmanager with MS Teams</title>
      <link>https://lapee79.github.io/en/article/prometheus-alertmanager-with-msteams/</link>
      <pubDate>Fri, 02 Aug 2019 10:00:00 +0000</pubDate>
      
      <guid>https://lapee79.github.io/en/article/prometheus-alertmanager-with-msteams/</guid>
      <description>Prometheus alerting through Alertmanager can be configured to send messages to Email, SMS or messangers. My company uses Microsoft Teams as team messanger. Alertmanager supports Email, HipChat, PagerDuty, Slack etc. natively except Microsoft Teams. So it needs to be used Webhook to send a third-party tool that sends messages to Microsoft Teams.
This post assumes that you are using the Prometheus operator for monitoring your Kubernetes cluster. We&amp;rsquo;re going to know how to send Prometheus alerts to Microsoft Teams.</description>
    </item>
    
  </channel>
</rss>